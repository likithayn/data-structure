//SLL OF STRUCTURE
#include<stdio.h>
#include<stdlib.h>
struct student
{	
	char usn[20];
	char name[20];
	char programme[20];
	int sem;
	long int phno;
};
typedef struct student S;
struct node
{
    S info;
    struct node *link;
};
typedef struct node* NODE;
NODE getnode()
{
    NODE x;
    x=(NODE)malloc(sizeof(struct node));
    if(x==NULL)
    {
        printf("sll is empty\n");
        exit(0);
    }
    return x;
}
NODE insert_front(NODE first)
{
    NODE temp;
    temp=getnode();
    printf("enter student details\n");
    scanf("%s %s %s %d %ld",(temp->info).usn,(temp->info).name,(temp->info).programme,&((temp->info).sem),&((temp->info).phno));
    temp ->link = first;
    return temp;
}
NODE insert_rear(NODE first)
{
    NODE temp,cur,prev;
    temp=getnode();
    printf("enter student details\n");
        scanf("%s %s %s %d %ld",(temp->info).usn,(temp->info).name,(temp->info).programme,&((temp->info).sem),&((temp->info).phno));
    temp->link=NULL;	
    if(first==NULL)
    {
        return temp;
    
    }
    else
    {
        cur=first;
        prev=NULL;
        while(cur!=NULL)
        {
            prev=cur;
            cur=cur->link;
        }
        prev->link=temp;
        return first;
    }
}
NODE delete_front(NODE first)
{
    NODE next;
    if(first==NULL)
    {
        printf("Singly link list is empty\n");
        return first;
    }
    printf("Delted elem is %s %s %s %d %ld",(first->info).usn,(first->info).name,(first->info).programme,(first->info).sem,(first->info).phno);
    next=first->link;
    free(first);
    return next;
}
NODE delete_rear(NODE first)
{
    NODE cur,prev;
    if(first==NULL)
    {
        printf("Singly link list is empty\n");
        return first;
    }
    else if(first->link == NULL)
    {
        printf("Delted elem is %s %s %s %d %ld",(first->info).usn,(first->info).name,(first->info).programme,(first->info).sem,(first->info).phno);
        free(first);
        return NULL;
    }
    else
    {
        cur = first;
        prev=NULL;
        while(cur->link!=NULL)
        {
            prev=cur;
            cur=cur->link;
        }
        printf("Delted elem is %s %s %s %d %ld",(cur->info).usn,(cur->info).name,(cur->info).programme,(cur->info).sem,(cur->info).phno);
        free(cur);
        prev->link=NULL;
        return first;
    }
}
void display(NODE first)
{
    NODE cur;
    cur=first;
    int count=0;
    if(first==NULL)
    {
        printf("Singly link list is empty");
        return ;
    }
    while(cur!=NULL)
    {
        printf("Delted elem is %s \n  %s \n %s \n %d \n  %ld\n",(cur->info).usn,(cur->info).name,(cur->info).programme,(cur->info).sem,(cur->info).phno);
        cur=cur->link;
        count++;
    }
    printf("number of nodes in sll %d\n",count);
}
int main()
{
    NODE first;
    first=NULL;
    int ch;
    while(1)
    {
        printf(" choice are \n1.Insert front\n2.display status of sll and count number of nodes\n3.perform insertion/deletion end of sll\n4.Delete front\n5.delete rear\n6.exit\n");
        printf("enter choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: 
                    first=insert_front(first);
                    break;
        	case 2: display(first);
                    break;
            
            case 3: first=insert_rear(first);
                    break;
            case 4: first=delete_front(first);
                    break;
            case 5:first=delete_rear(first);
   					break;
            case 6:exit(0);
            default:printf("Invalid choice\n");
                    
        }
    }
    return 0;
}
