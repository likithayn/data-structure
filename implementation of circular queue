//IMPLEMENTATION OF CIRCULAR QUEUES USING STATIC MEMORY ALLOCATION // 
#include <stdio.h>
#include<stdlib.h>
#define MAX_SIZE 4
void  insert(int * CQ,int * rear,int * count, int elem)
{
    if((*count)==MAX_SIZE)
    { 	
        printf("\n CIRCULAR QUEUE IS FULL\n\n");
    }
    else//insertion posible
    { 
        (*count)++;
        (*rear)=((*rear)+1)%(MAX_SIZE);
        CQ[(*rear)]=elem;
    }

}
void delete(int * CQ ,int * front,int * count)
{
        if((*count)!=0)//deletion posible
        {
            printf("the element to be deleted is %d\n",CQ[(*front)]);
            (*front)=((*front)+1)%(MAX_SIZE);
	        (*count)--;
        }
        else
        {
            printf("\n CIRCULAR QUEUE IS EMPTY \n\n");
        }
  
}
void display(int * CQ,int front,int count)
{      
	//displaying elements of CQ
        printf("elements of queue are\n");
        for(int i=0;i<count;i++)	     
        {  
              printf(" %d \n",CQ[front]);
              front=(front+1)%(MAX_SIZE);
        }
}
int main()
{
    int CQ[MAX_SIZE],rear=-1,front=0,count=0,elem,ch;
    while(1)
    {
        printf("enter the choices \n1.insert\n2.delete\n3.display\n4.exit\n ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:printf("enter the element\n");
                    scanf("%d",&elem);
                    insert(CQ,&rear,&count,elem);
                    break;
            case 2:delete(CQ,&front,&count);
                    break;
            case 3:display(CQ,front,count);
                    break;
            case 4:exit(0);
            default:printf("invalid choice\n");
        }
    } 

    return 0;
}
