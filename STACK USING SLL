//SLL OF STACK
#include <stdio.h>
#include <stdlib.h>
struct node
{	
    int info;
    struct node *link;
};
typedef struct node* NODE;
NODE getnode()
{
    NODE x;
    x=(NODE)malloc(sizeof(struct node));
    if(x==NULL)
    {
        printf("sll is empty\n");
        exit(0);
    }
    return x;
}
NODE insert_rear(NODE stack,int item)
{
    NODE temp,cur,prev;
    temp=getnode();
    temp->info=item;
    temp->link=NULL;
    if(stack==NULL)
        return temp;
    else
    {
        cur=stack;
        prev=NULL;
        while(cur!=NULL)
        {
            prev=cur;
            cur=cur->link;
        }
        prev->link=temp;
        return stack;
    }
}

NODE delete_rear(NODE stack)
{
    NODE cur,prev;
    if(stack==NULL)
    {
        printf("Singly link list is empty\n");
        return stack;
    }
    else if(stack->link == NULL)
    {
        printf("Delted information=%d",stack->info);
        free(stack);
        return NULL;
    }
    else
    {
        cur = stack;
        prev=NULL;
        while(cur->link!=NULL)
        {
            prev=cur;
            cur=cur->link;
        }
        printf("Delted information is %d",cur->info);
        free(cur);
        prev->link=NULL;
        return stack;
    }
}
void display(NODE stack)
{
    NODE cur;
    cur=stack;
    if(stack==NULL)
    {
        printf("Singly link list is empty");
        return ;
    }
    while(cur!=NULL)
    {
        printf("%d\t",cur->info);
        cur=cur->link;
    }
}
int main()
{
    NODE stack;
    stack=NULL;
    int item,ch;
    while(1)
    {
        printf("Enter a choice\n1:Insert from rear\n2:Delete from rear\n3:Display\n4.exit\n");
        printf("enter the choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: printf("Enter the information to be inserted\n");
                    scanf("%d",&item);
                    stack=insert_rear(stack,item);
                    break;
            case 2:stack=delete_rear(stack);
                    break;
            case 3: display(stack);
                    break;
            case 4 : exit(0);
        }
    }
    return 0;
}
