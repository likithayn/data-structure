//SLL OF QUEUE
#include <stdio.h>
#include <stdlib.h>
struct node
{	
    int info;
    struct node *link;
};
typedef struct node* NODE;
NODE getnode()
{
    NODE x;
    x=(NODE)malloc(sizeof(struct node));
    if(x==NULL)
    {
        printf("single linked list  is empty\n");
        exit(0);
    }
    return x;
}

NODE insert_rear(NODE queue,int item)
{
    NODE temp,cur,prev;
    temp=getnode();
    temp->info=item;
    temp->link=NULL;
    if(queue==NULL)
{
        return temp;
}  
  else
    {
        cur=queue;
        prev=NULL;
        while(cur!=NULL)
        {
            prev=cur;
            cur=cur->link;
        }
        prev->link=temp;
        return queue;
    }
}
NODE delete_front(NODE queue)
{
    NODE next;
    if(queue==NULL)
    {
        printf("Singly link list is empty\n");
        return queue;
    }
    printf("Delted node is %d\n",queue->info);
    next=queue->link;
    free(queue);
    return next;
}

void display(NODE queue)
{
    NODE cur;
    cur=queue;
    if(queue==NULL)
    {	
        printf("Singly link list is empty");
        return;
    }
    while(cur!=NULL)
    {
        printf("%d\t",cur->info);
        cur=cur->link;
    }
}
int main()
{
    NODE queue;
    queue=NULL;
    int item,ch;
    while(1)
    {
        printf("Enter a choice\n1.Insert from rear\n2.Delete from front\n3.Display\n4.exit\n");
        printf("enter the choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: printf("Enter the element to be inserted\n");
                    scanf("%d",&item);
                    queue=insert_rear(queue,item);
                    break;
            case 2: queue=delete_front(queue);
                    break;
            case 3: display(queue);
                    break;
            case 4 : exit(0);
        }
    }
    return 0;
}
